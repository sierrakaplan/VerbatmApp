{
  "name": "juice",
  "version": "1.2.0",
  "description": "Inlines css into html source",
  "bin": {
    "juice": "./bin/juice"
  },
  "main": "./lib/juice",
  "scripts": {
    "test": "mocha --reporter spec",
    "testcover": "istanbul cover node_modules/mocha/bin/_mocha -- -R spec"
  },
  "contributors": [
    {
      "name": "Guillermo Rauch",
      "email": "guillermo@learnboost.com"
    },
    {
      "name": "Arian Stolwijk",
      "email": "arian@aryweb.nl"
    },
    {
      "name": "PaweÅ‚ Marzec",
      "email": "rork@cojestgrane.pl"
    },
    {
      "name": "Andrew Kelley",
      "email": "superjoe30@gmail.com"
    },
    {
      "name": "Francois-Guillaume Ribreau",
      "email": "npm@fgribreau.com"
    }
  ],
  "engines": {
    "node": ">=0.10.0"
  },
  "dependencies": {
    "batch": "0.5.2",
    "cheerio": "0.18.0",
    "commander": "2.3.0",
    "cssom": "0.3.0",
    "slick": "1.12.1",
    "web-resource-inliner": "1.1.1"
  },
  "devDependencies": {
    "should": "4.0.4",
    "mocha": "1.21.4"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/Automattic/juice.git"
  },
  "readme": "[![Build Status](https://travis-ci.org/Automattic/juice.png?branch=master)](https://travis-ci.org/Automattic/juice)\r\n[![Dependency Status](https://david-dm.org/Automattic/juice.png)](https://david-dm.org/Automattic/juice)\r\n# Juice ![](http://i.imgur.com/jN8Ht.gif)\r\n\r\nGiven HTML, juice will inline your CSS properties into the `style` attribute.\r\n\r\n## How to use\r\n\r\nJuice has a number of functions based on whether you want to process a file, HTML string, or a cheerio document, and whether you want juice to automatically get remote stylesheets, scripts and image dataURIs to inline.\r\n\r\nTo inline HTML without getting remote resources, using default options:\r\n\r\n```js\r\nvar juice = require('juice');\r\nvar result = juice(\"<style>div{color:red;}</style><div/>\");\r\n```\r\n\r\nresult will be:\r\n```html\r\n<div style=\"color: red;\"></div>\r\n```\r\n\r\n## What is this useful for ?\r\n\r\n- HTML emails. For a comprehensive list of supported selectors see [here](http://www.campaignmonitor.com/css/)\r\n- Embedding HTML in 3rd-party websites.\r\n\r\n## Projects using juice\r\n\r\n* [node-email-templates][1] - Node.js module for rendering beautiful emails with [ejs][2] templates and email-friendly inline CSS using [juice][3].\r\n* [swig-email-templates][4] - Uses [swig][5], which gives you [template inheritance][6], and can generate a [dummy context][7] from a template.\r\n\r\n[1]: https://github.com/niftylettuce/node-email-templates\r\n[2]: https://github.com/visionmedia/ejs\r\n[3]: https://github.com/Automattic/juice\r\n[4]: https://github.com/superjoe30/swig-email-templates\r\n[5]: https://github.com/paularmstrong/swig\r\n[6]: https://docs.djangoproject.com/en/dev/topics/templates/#template-inheritance\r\n[7]: https://github.com/superjoe30/swig-dummy-context\r\n\r\n## Documentation\r\n\r\n### Options\r\n\r\nAll juice methods take an options object that can contain any of these properties, though not every method uses all of these:\r\n\r\n * `extraCss` - extra css to apply to the file. Defaults to `\"\"`.\r\n * `applyStyleTags` - whether to inline styles in `<style></style>` Defaults to `true`.\r\n * `removeStyleTags` - whether to remove the original `<style></style>` tags after (possibly) inlining the css from them. Defaults to `true`.\r\n * `preserveMediaQueries` - preserves all media queries (and contained styles) within `<style></style>` tags as a refinement when `removeStyleTags` is `true`. Other styles are removed. Defaults to `false`.\r\n * `applyWidthAttributes` - whether to use any CSS pixel widths to create `width` attributes on elements set in `juice.widthElements`. Defaults to `false`.\r\n * `applyAttributesTableElements` - whether to create attributes for styles in `juice.styleToAttribute` on elements set in `juice.tableElements`. Defaults to `false`.\r\n * `webResources` - An options object that will be passed to [web-resource-inliner](https://www.npmjs.com/package/web-resource-inliner) for juice functions that will get remote resources (`juiceResources` and `juiceFile`). Defaults to `{}`.\r\n * `inlinePseudoElements` - Whether to insert pseudo elements (`::before` and `::after`) as `<span>` into the DOM. *Note*: Inserting pseudo elements will modify the DOM and may conflict with CSS selectors elsewhere on the page (e.g., `:last-child`).\r\n * `xmlMode` - whether to output XML/XHTML with all tags closed. Note that the input *must* also be valid XML/XHTML or you will get undesirable results. Defaults to `false`.\r\n\r\n### Methods\r\n\r\n#### juice(html [, options])\r\n\r\nReturns string containing inlined HTML. Does not fetch remote resources.\r\n\r\n * `html` - html string, accepts complete documents as well as fragments\r\n * `options` - optional, see Options above\r\n\r\n#### juice.juiceResources(html, options, callback)\r\n\r\nCallback returns string containing inlined HTML. Fetches remote resources.\r\n\r\n * `html` - html string\r\n * `options` - see Options above\r\n * `callback(err, html)`\r\n   - `err` - `Error` object or `null`\r\n   - `html` - inlined HTML\r\n\r\n#### juice.juiceFile(filePath, options, callback)\r\n\r\nCallback returns string containing inlined HTML. Fetches remote resources.\r\n\r\n * `filePath` - path to the html file to be juiced\r\n * `options` - see Options above\r\n * `callback(err, html)`\r\n   - `err` - `Error` object or `null`\r\n   - `html` - inlined HTML\r\n\r\n#### juice.juiceDocument($ [, options])\r\n\r\nReturns string containing inlined HTML. Does not fetch remote resources.\r\n\r\n * `$` - a cheerio instance, be sure to use the same cheerio version that juice uses\r\n * `options` - optional, see Options above`\r\n\r\n#### juice.inlineContent(html, css [, options])\r\n\r\nThis takes html and css and returns new html with the provided css inlined.\r\nIt does not look at `<style>` or `<link rel=\"stylesheet\">` elements at all.\r\n\r\n * `html` - html string\r\n * `css` - css string\r\n * `options` - optional, see Options above\r\n\r\n#### juice.inlineDocument($, css [, options])\r\n\r\nGiven a cheerio instance and css, this modifies the cheerio instance so that the provided css is inlined. It does not look at `<style>` or `<link rel=\"stylesheet\">` elements at all.\r\n\r\n * `$` - a cheerio instance, be sure to use the same cheerio version that juice uses\r\n * `css` - css string\r\n * `options` - optional, see Options above\r\n\r\n### Global settings\r\n\r\n#### juice.ignoredPseudos\r\n\r\nArray of ignored pseudo-selectors such as 'hover' and 'active'.\r\n\r\n#### juice.widthElements\r\n\r\nArray of HTML elements that can receive `width` attributes.\r\n\r\n#### juice.styleToAttribute\r\n\r\nObject of style property names (key) to their respective attribute names (value).\r\n\r\n#### juice.tableElements\r\n\r\nArray of table HTML elements that can receive attributes defined in `juice.styleToAttribute`.\r\n\r\n## Credits\r\n\r\n(The MIT License)\r\n\r\nCopyright (c) 2015 Guillermo Rauch &lt;guillermo@learnboost.com&gt;\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining\r\na copy of this software and associated documentation files (the\r\n'Software'), to deal in the Software without restriction, including\r\nwithout limitation the rights to use, copy, modify, merge, publish,\r\ndistribute, sublicense, and/or sell copies of the Software, and to\r\npermit persons to whom the Software is furnished to do so, subject to\r\nthe following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be\r\nincluded in all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\r\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\r\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\r\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\r\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n\r\n### 3rd-party\r\n\r\n- Uses [cheerio](https://github.com/cheeriojs/cheerio) for the underlying DOM\r\nrepresentation.\r\n- Uses [cssom](https://github.com/NV/CSSOM) to parse out CSS selectors and\r\n[Slick](http://github.com/subtleGradient/slick) to tokenize them.\r\n- Icon by [UnheardSounds](http://unheardsounds.deviantart.com/gallery/26536908#/d2ngozi)\r\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/Automattic/juice/issues"
  },
  "homepage": "https://github.com/Automattic/juice",
  "_id": "juice@1.2.0",
  "dist": {
    "shasum": "50b36004aab733f02871e33d788699f9e267e55c"
  },
  "_from": "juice@^1.0.0",
  "_resolved": "https://registry.npmjs.org/juice/-/juice-1.2.0.tgz"
}
