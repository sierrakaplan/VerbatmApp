/**
 * Small utility module for compling HTML templates or pre-processed CSS.
 *
 * @author: [@jasonsims]('https://github.com/jasonsims')
 */

'use strict';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _path = require('path');

var _consolidate = require('consolidate');

var _consolidate2 = _interopRequireDefault(_consolidate);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _lodash = require('lodash');

var engineMap = {
  // HTML Template engines
  'hbs': _consolidate2['default'].handlebars.render,
  'emblem': renderEmblem,
  // CSS pre-processors
  'less': renderLess,
  'stylus': renderStylus,
  'styl': renderStyl,
  'sass': renderSass,
  'scss': renderSass,
  // Handle plain CSS also
  'css': renderDefault,
  '': renderDefault
};

exports.render = function templateManager(filename, source, locals, callback) {
  if (!source) return null;

  var engine = (0, _path.extname)(filename).slice(1);
  locals.filename = filename;
  locals.engine = '.' + engine;

  return new _bluebird2['default'](function (resolve, reject) {
    var fn;
    if (engine.length && _consolidate2['default'][engine] !== undefined) {
      fn = _consolidate2['default'][engine].render;
    } else {
      fn = engineMap[engine];
    }
    if (!(0, _lodash.isFunction)(fn)) return reject('Can\'t render file with extension ' + engine);
    fn(source, locals, function (err, rendered) {
      if (err) return reject(err);
      resolve(rendered);
    });
  }).nodeify(callback);
};

// Deprecated. This engine is deprecated since v2.0
function renderEmblem(source, locals, cb) {
  var emblem = require('emblem');
  var handlebars = require('handlebars');

  var template = emblem.compile(handlebars, source);
  cb(null, template(locals));
}

// CSS pre-processors
function renderLess(source, locals, cb) {
  var less = require('less');
  var dir = (0, _path.dirname)(locals.filename);
  var base = (0, _path.basename)(locals.filename);

  less.render(source, {
    paths: [dir],
    filename: base
  }, function (err, output) {
    if (err) {
      return cb(err);
    }
    cb(null, output.css || output);
  });
}

function renderStylus(source, locals, cb) {
  var stylus = require('stylus');

  // Render stylus synchronously as it does not appear to handle asynchronous
  // calls properly when an error is generated.
  var css = stylus.render(source, locals);
  cb(null, css);
}

function renderStyl(source, locals, cb) {
  var styl = require('styl');

  cb(null, styl(source, locals).toString());
}

function renderSass(source, locals, cb) {
  var sass = require('node-sass');

  locals.data = source;
  locals.includePaths = [locals.templatePath];

  sass.render(locals, function (err, data) {
    cb(err, data.css.toString());
  });
}

// Default wrapper for handling standard CSS and empty source.
function renderDefault(source, locals, cb) {
  cb(null, source);
}